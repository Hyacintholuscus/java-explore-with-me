{
	"info": {
		"_postman_id": "242d231c-c000-4b77-8d87-fd48ba2e0334",
		"name": "Moderation enhancement test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33433593"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "String length restrictions",
					"item": [
						{
							"name": "Добавление комментария от администратора с text.length < 3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.rejectEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        comment = {'text': rnd.getWord(2)};\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId/moderation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId",
										"moderation"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария от администратора с text.length > 5000",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.rejectEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        comment = {'text': rnd.getWord(5001)};\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId/moderation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId",
										"moderation"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария от администратора с text.length == 3 и text.length == 5000",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.rejectEvent(event.id);\r",
											"        const minComment = await api.addComment(event.id, {'text': \"АБВ\"});\r",
											"        comment = {'text': rnd.getWord(5000)};\r",
											"        pm.collectionVariables.set('eid', event.id);\r",
											"        pm.collectionVariables.set('source1', minComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const minComment = pm.collectionVariables.get('source1');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий с 3 символами должен содержать поля: id, text, event, status, created\", function () {\r",
											"pm.expect(minComment).to.have.property('id');\r",
											"pm.expect(minComment).to.have.property('text');\r",
											"pm.expect(minComment).to.have.property('event');\r",
											"pm.expect(minComment).to.have.property('status');\r",
											"pm.expect(minComment).to.have.property('created');\r",
											"});\r",
											"\r",
											"pm.test(\"Комментарий с 5000 символов должен содержать поля: id, text, event, status, created\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('event');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('created');\r",
											"});\r",
											"\r",
											"pm.test(\"Текст комментария в ответе должен соответствовать тексу в запросе\", function () {\r",
											"    pm.expect(\"АБВ\").equal(minComment.text, 'Текс комментария с 3 символами не соответствует');\r",
											"    pm.expect(source.text).equal(target.text, 'Текс комментария с 5000 символов не соответствует');\r",
											"});\r",
											"\r",
											"pm.test(\"Id события в запросе и в ответе должны совпадать\", function () {\r",
											"    pm.expect(target.event).equal(pm.collectionVariables.get('eid'));\r",
											"    pm.expect(minComment.event).equal(pm.collectionVariables.get('eid'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId/moderation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId",
										"moderation"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Not found",
					"item": [
						{
							"name": "Добавление комментария, когда событие не найдено",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        pm.collectionVariables.set(\"eid\", 99999);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId/moderation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId",
										"moderation"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария администратором: комментарий не найден",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        pm.collectionVariables.set(\"comId\", 99999);\r",
											"        const updateComment = rnd.getComment();\r",
											"        console.log(\"updateComment.text = \" + updateComment.text);\r",
											"        pm.request.headers.add({\r",
											"            key: \"Content-Type\",\r",
											"            value: \"application/json\"\r",
											"        });\r",
											"        pm.request.body = JSON.stringify(updateComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/events/moderation/:comId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										"moderation",
										":comId"
									],
									"variable": [
										{
											"key": "comId",
											"value": "{{comId}}",
											"description": "(Required) id комментария"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Добавление комментария, когда событие опубликовано",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        comment = rnd.getComment();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/:eventId/moderation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								":eventId",
								"moderation"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Required) id события"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария с тем же текстом",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.rejectEvent(event.id);\r",
									"        const comment = await api.addComment(event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"comId\", comment.id);\r",
									"        pm.collectionVariables.set(\"response\", comment);\r",
									"        const updateComment = {'text': comment.text};\r",
									"        console.log(\"updateComment.text = \" + updateComment.text);\r",
									"        pm.request.headers.add({\r",
									"            key: \"Content-Type\",\r",
									"            value: \"application/json\"\r",
									"        });\r",
									"        pm.request.body = JSON.stringify(updateComment);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get(\"response\");\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, status, created\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('created');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.id).equal(target.id, 'Id изменённого комментария должен соответствовать id комментария до изменений');\r",
									"    pm.expect(source.created).equal(target.created, 'Дата создания изменённого комментария должна соответствовать дате создания комментария до изменений');\r",
									"});\r",
									"\r",
									"pm.test(\"Статус и текст комментария должны остаться прежними после выполнения запроса\", function () {\r",
									"    pm.expect(target.text).equal(source.text, \"Текст комментария должен остаться прежним после выполнения запроса\");\r",
									"    pm.expect(target.status).equal(source.status, \"Статус комментария должен остаться прежним после выполнения запроса\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/moderation/:comId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"moderation",
								":comId"
							],
							"variable": [
								{
									"key": "comId",
									"value": "{{comId}}",
									"description": "(Required) id комментария"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Получение списка событий, ожидающих модерацию",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        pm.collectionVariables.set('response', event);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"let founded;\r",
							"target.forEach(function(element){if (element.id == source.id) founded = element});\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
							"pm.expect(founded).to.have.property('id');\r",
							"pm.expect(founded).to.have.property('title');\r",
							"pm.expect(founded).to.have.property('annotation');\r",
							"pm.expect(founded).to.have.property('category');\r",
							"pm.expect(founded).to.have.property('paid');\r",
							"pm.expect(founded).to.have.property('eventDate');\r",
							"pm.expect(founded).to.have.property('initiator');\r",
							"pm.expect(founded).to.have.property('views');\r",
							"pm.expect(founded).to.have.property('confirmedRequests');\r",
							"pm.expect(founded).to.have.property('description');\r",
							"pm.expect(founded).to.have.property('participantLimit');\r",
							"pm.expect(founded).to.have.property('state');\r",
							"pm.expect(founded).to.have.property('createdOn');\r",
							"pm.expect(founded).to.have.property('publishedOn');\r",
							"pm.expect(founded).to.have.property('location');\r",
							"pm.expect(founded).to.have.property('requestModeration');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.annotation).equal(founded.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
							"    pm.expect(source.category.id).equal(founded.category.id, 'Идентификатор категории должен соответствовать искомой категории');\r",
							"    pm.expect(source.paid.toString()).equal(founded.paid.toString(), 'Стоимость посещения события должна соответствовать искомому событию');\r",
							"    pm.expect(source.eventDate).equal(founded.eventDate, 'Дата проведения события должна соответствовать дате искомого события');\r",
							"    pm.expect(source.description).equal(founded.description, 'Описание события должно соответствовать искомому событию');\r",
							"    pm.expect(source.title).equal(founded.title, 'Название события должно соответствовать искомому событию');\r",
							"    pm.expect(source.participantLimit.toString()).equal(founded.participantLimit.toString(), 'Число участников события должно соответствовать искомому событию');\r",
							"    pm.expect(source.state).equal(founded.state, 'Статус события должно соответствовать статусу искомого событию');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/events/moderation?from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"moderation"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария от администратора",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.rejectEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        comment = rnd.getComment();\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(comment),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, event, status, created\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Текст комментария в ответе должен соответствовать тексу в запросе\", function () {\r",
							"    pm.expect(source.text).equal(target.text);\r",
							"});\r",
							"\r",
							"pm.test(\"При создании у комментария должен быть статус CREATED\", function () {\r",
							"    pm.expect(target.status).equal(\"CREATED\");\r",
							"});\r",
							"\r",
							"pm.test(\"Id события в запросе и в ответе должны совпадать\", function () {\r",
							"    pm.expect(target.event).equal(pm.collectionVariables.get(\"eid\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId/moderation",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId",
						"moderation"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "(Required) id события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария администратором",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.rejectEvent(event.id);\r",
							"        const comment = await api.addComment(event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"comId\", comment.id);\r",
							"        pm.collectionVariables.set(\"response\", comment);\r",
							"        const updateComment = rnd.getComment();\r",
							"        console.log(\"updateComment.text = \" + updateComment.text);\r",
							"        pm.request.headers.add({\r",
							"            key: \"Content-Type\",\r",
							"            value: \"application/json\"\r",
							"        });\r",
							"        pm.request.body = JSON.stringify(updateComment);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get(\"response\");\r",
							"const target = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, status, created\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.id).equal(target.id, 'Id изменённого комментария должен соответствовать id комментария до изменений');\r",
							"    pm.expect(source.created).equal(target.created, 'Дата создания изменённого комментария должна соответствовать дате создания комментария до изменений');\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарий должно иметь статус CREATED при создании и статус EDITED после выполнения запроса\", function () {\r",
							"    pm.expect(source.status).equal(\"CREATED\");\r",
							"    pm.expect(target.status).equal(\"EDITED\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/events/moderation/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"moderation",
						":comId"
					],
					"variable": [
						{
							"key": "comId",
							"value": "{{comId}}",
							"description": "(Required) id комментария"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение событий по публичным эндпоинтам без комментариев",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        const comment = await api.addComment(event.id, rnd.getComment());\r",
							"        const pendingEvent = await api.findUserEvent(user.id, event.id);\r",
							"        event = await api.publishEvent(event.id);\r",
							"        const publishedEvent = await api.findEvent(event.id);\r",
							"        const compilation = await api.addCompilation(rnd.getCompilation(event.id));\r",
							"        pm.request.removeQueryParams(['text', 'categories', 'paid']);\r",
							"        pm.request.addQueryParams([`text=` + event.annotation, 'categories=' + category.id, 'paid=' + event.paid]);\r",
							"        pm.collectionVariables.set('source1', comment);\r",
							"        pm.collectionVariables.set('source2', pendingEvent);\r",
							"        pm.collectionVariables.set('source3', publishedEvent);\r",
							"        pm.collectionVariables.set('source4', compilation);\r",
							"        pm.collectionVariables.set('response', event);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const comment = pm.collectionVariables.get('source1');\r",
							"const pendingEvent = pm.collectionVariables.get('source2');\r",
							"const pendingComment = pendingEvent.moderationComments[0];\r",
							"const publishedEvent = pm.collectionVariables.get('source3');\r",
							"const compilation = pm.collectionVariables.get('source4');\r",
							"const target = pm.response.json()[0];\r",
							"let founded;\r",
							"compilation.events.forEach(function(element){if (element.id == source.id) founded = element});\r",
							"\r",
							"pm.test(\"Событие, полученное из списка событий должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"});\r",
							"\r",
							"pm.test(\"Событие, полученное по id должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration, confirmedRequests\", function () {\r",
							"pm.expect(publishedEvent).to.have.property('id');\r",
							"pm.expect(publishedEvent).to.have.property('title');\r",
							"pm.expect(publishedEvent).to.have.property('annotation');\r",
							"pm.expect(publishedEvent).to.have.property('category');\r",
							"pm.expect(publishedEvent).to.have.property('paid');\r",
							"pm.expect(publishedEvent).to.have.property('eventDate');\r",
							"pm.expect(publishedEvent).to.have.property('initiator');\r",
							"pm.expect(publishedEvent).to.have.property('description');\r",
							"pm.expect(publishedEvent).to.have.property('participantLimit');\r",
							"pm.expect(publishedEvent).to.have.property('state');\r",
							"pm.expect(publishedEvent).to.have.property('createdOn');\r",
							"pm.expect(publishedEvent).to.have.property('location');\r",
							"pm.expect(publishedEvent).to.have.property('requestModeration');;\r",
							"pm.expect(publishedEvent).to.have.property('confirmedRequests');\r",
							"});\r",
							"\r",
							"pm.test(\"Событие, полученное из подборки должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
							"pm.expect(founded).to.have.property('id');\r",
							"pm.expect(founded).to.have.property('title');\r",
							"pm.expect(founded).to.have.property('annotation');\r",
							"pm.expect(founded).to.have.property('category');\r",
							"pm.expect(founded).to.have.property('paid');\r",
							"pm.expect(founded).to.have.property('eventDate');\r",
							"pm.expect(founded).to.have.property('initiator');\r",
							"pm.expect(founded).to.have.property('views');\r",
							"pm.expect(founded).to.have.property('confirmedRequests');\r",
							"});\r",
							"\r",
							"pm.test(\"В событии, полученном инициатором, должно быть поле moderationComments и оно должно содержать созданный комментарий\", function () {\r",
							"    pm.expect(pendingEvent).to.have.property(\"moderationComments\");\r",
							"    pm.expect(pendingComment.id).equal(comment.id, 'Id комментария неопубликованного события должен соответствовать созданному комментарию');\r",
							"    pm.expect(pendingComment.event).equal(comment.event, 'Event комментария неопубликованного события должен соответствовать созданному комментарию');\r",
							"    pm.expect(pendingComment.text).equal(comment.text, 'Текст комментария неопубликованного события должен соответствовать созданному комментарию');\r",
							"    pm.expect(pendingComment.status).equal(comment.status, 'Статус комментария неопубликованного события должен соответствовать созданному комментарию');\r",
							"    pm.expect(pendingComment.created).equal(comment.created, 'Дата создания комментария неопубликованного события должен соответствовать созданному комментарию');\r",
							"});\r",
							"\r",
							"pm.test(\"В ответах публичных эндпоинтов не должно быть поля moderationComments\", function () {\r",
							"    pm.expect(publishedEvent).to.not.have.any.keys(\"moderationComments\");\r",
							"    pm.expect(founded).to.not.have.any.keys(\"moderationComments\");\r",
							"    pm.expect(target).to.not.have.any.keys(\"moderationComments\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events?text=0&categories=0&paid=true&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&onlyAvailable=false&sort=EVENT_DATE&from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "text",
							"value": "0",
							"description": "текст для поиска в содержимом аннотации и подробном описании события"
						},
						{
							"key": "categories",
							"value": "0",
							"description": "список идентификаторов категорий в которых будет вестись поиск"
						},
						{
							"key": "paid",
							"value": "true",
							"description": "поиск только платных/бесплатных событий"
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38",
							"description": "дата и время не раньше которых должно произойти событие"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38",
							"description": "дата и время не позже которых должно произойти событие"
						},
						{
							"key": "onlyAvailable",
							"value": "false",
							"description": "только события у которых не исчерпан лимит запросов на участие"
						},
						{
							"key": "sort",
							"value": "EVENT_DATE",
							"description": "Вариант сортировки: по дате события или по количеству просмотров"
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество событий, которые нужно пропустить для формирования текущего набора"
						},
						{
							"key": "size",
							"value": "1000",
							"description": "количество событий в наборе"
						}
					]
				},
				"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
			},
			"response": []
		},
		{
			"name": "Получение событий, добавленных текущим пользователем с фильтрацией по статусу события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category1 = await api.addCategory(rnd.getCategory());\r",
							"        const category2 = await api.addCategory(rnd.getCategory());;\r",
							"        let event1 = await api.addEvent(user.id, rnd.getEvent(category1.id));\r",
							"        let event2 = await api.addEvent(user.id, rnd.getEvent(category2.id));\r",
							"        event1 = await api.rejectEvent(event1.id);\r",
							"        event2 = await api.publishEvent(event2.id);\r",
							"        pm.collectionVariables.set('response', event1);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"let founded;\r",
							"target.forEach(function(element){if (element.id == source.id) founded = element});\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
							"pm.expect(founded).to.have.property('id');\r",
							"pm.expect(founded).to.have.property('title');\r",
							"pm.expect(founded).to.have.property('annotation');\r",
							"pm.expect(founded).to.have.property('category');\r",
							"pm.expect(founded).to.have.property('paid');\r",
							"pm.expect(founded).to.have.property('eventDate');\r",
							"pm.expect(founded).to.have.property('initiator');\r",
							"pm.expect(founded).to.have.property('views');\r",
							"pm.expect(founded).to.have.property('confirmedRequests');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.annotation).equal(founded.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
							"    pm.expect(source.category.id).equal(founded.category.id, 'Идентификатор категории должен соответствовать искомой категории');\r",
							"    pm.expect(source.paid.toString()).equal(founded.paid.toString(), 'Стоимость посещения события должна соответствовать искомому событию');\r",
							"    pm.expect(source.eventDate).equal(founded.eventDate, 'Дата проведения события должна соответствовать дате искомого события');\r",
							"    pm.expect(source.title).equal(founded.title, 'Название события должно соответствовать искомому событию');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events?state=CANCELED&from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"query": [
						{
							"key": "state",
							"value": "CANCELED"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000",
							"description": "количество элементов в наборе"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение события, добавленного текущим пользователем со списком комментариев",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id)); \r",
							"        const comment = await api.addComment(event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set(\"response\", comment);\r",
							"        pm.collectionVariables.set(\"source1\", event);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get(\"response\");\r",
							"const event = pm.collectionVariables.get(\"source1\");\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration, moderationComments\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('moderationComments');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(event.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
							"    pm.expect(event.category.id).equal(target.category.id, 'Идентификатор категории должен соответствовать искомой категории');\r",
							"    pm.expect(event.paid.toString()).equal(target.paid.toString(), 'Стоимость посещения события должна соответствовать искомому событию');\r",
							"    pm.expect(event.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать дате искомого события');\r",
							"    pm.expect(event.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарий к событию должен соответствовать созданному комментарию\", function () {\r",
							"    pm.expect(target.moderationComments).to.deep.include(source);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "(Required) id события"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addComment(eventId, comment, verbose=null) {\r",
					"        return this.post(\"/admin/events/\" + eventId + \"/moderation\", comment, \"Ошибка при добавлении нового комментария: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUserEvent(userId, eventId, verbose=null) {\r",
					"        return this.get('/users/' + userId + \"/events/\" + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"\r",
					"    getComment() {\r",
					"        return {\r",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
					"        }\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "comId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "source3",
			"value": "",
			"type": "string"
		},
		{
			"key": "source4",
			"value": "",
			"type": "string"
		}
	]
}